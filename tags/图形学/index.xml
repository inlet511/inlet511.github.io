<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>图形学 on 安宁技术博客</title>
    <link>/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/</link>
    <description>Recent content in 图形学 on 安宁技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2022 &lt;a href=&#34;https://inlet511.github.io//&#34;&gt;An Ning&lt;/a&gt;&lt;/a&gt;
</copyright>
    <lastBuildDate>Thu, 03 Nov 2022 22:14:37 +0800</lastBuildDate><atom:link href="/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RDG04 Graphics Pipeline State Initializer</title>
      <link>/posts/rdg-graphics-pipeline-state-initializer/</link>
      <pubDate>Thu, 03 Nov 2022 22:14:37 +0800</pubDate>
      
      <guid>/posts/rdg-graphics-pipeline-state-initializer/</guid>
      <description>1 概述和范例 FGraphicsPipelineStateInitializer 是一个代表渲染管线状态的对象，一个使用范例： FGraphicsPipelineStateInitializer GraphicsPSOInit; // 声明 RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit); // 应用RenderTargets // 设置各种状态 GraphicsPSOInit.DepthStencilState = TStaticDepthStencilState&amp;lt;false, CF_Always&amp;gt;::GetRHI(); GraphicsPSOInit.BlendState = TStaticBlendState&amp;lt;CW_RGB, BO_Add, BF_One, BF_One&amp;gt;::GetRHI(); GraphicsPSOInit.RasterizerState = TStaticRasterizerState&amp;lt;FM_Solid, CM_None&amp;gt;::GetRHI(); GraphicsPSOInit.PrimitiveType = PT_TriangleList;</description>
    </item>
    
    <item>
      <title>RDG03 AddPass</title>
      <link>/posts/rdg-addpass/</link>
      <pubDate>Wed, 02 Nov 2022 23:19:27 +0800</pubDate>
      
      <guid>/posts/rdg-addpass/</guid>
      <description>1 原型 RDG流程中，添加一个Pass的方法是 FRDGBuilder::AddPass(),其应用的最广泛的一个重载的原型如下： template &amp;lt;typename ParameterStructType, typename ExecuteLambdaType&amp;gt; FRDGPassRef FRDGBuilder::AddPass( FRDGEventName&amp;amp;&amp;amp; Name, const ParameterStructType* ParameterStruct,</description>
    </item>
    
    <item>
      <title>RDG02 Uniformbuffer</title>
      <link>/posts/rdg-uniformbuffer/</link>
      <pubDate>Tue, 01 Nov 2022 14:01:29 +0800</pubDate>
      
      <guid>/posts/rdg-uniformbuffer/</guid>
      <description>1 两种引用UniformBuffer的方法 如上文所述，Uniform Buffer即一个全局的Shader参数。 我们在 这篇文章 中已经讲过UniformB</description>
    </item>
    
    <item>
      <title>RDG01-Shader参数</title>
      <link>/posts/rdg-shader-params/</link>
      <pubDate>Mon, 31 Oct 2022 21:34:21 +0800</pubDate>
      
      <guid>/posts/rdg-shader-params/</guid>
      <description>1 概述 Render Dependency Graph 简称RDG，从UE4最后几个版本开始逐步取代原来的渲染代码。 到了UE5，逐步完善，在源码中应用范围也日趋广泛。后面关于RDG的描述均以 UE5 为</description>
    </item>
    
    <item>
      <title>Ue4 Compute Shader</title>
      <link>/posts/ue4-compute-shader/</link>
      <pubDate>Sun, 10 Apr 2022 22:06:45 +0800</pubDate>
      
      <guid>/posts/ue4-compute-shader/</guid>
      <description>UE4版本:4.26.2 前置知识 DirectX中的Compute Shader, UAV(Unordered Access View) 推荐阅读《Introduction to 3D Game Programming with DirectX 11》的 Chapter12-The Compute Shader 工程源码 UE4GraphicsGuide 测试场景</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 04 Uniformbuffer</title>
      <link>/posts/ue4-global-shaders-uniformbuffer/</link>
      <pubDate>Sun, 10 Apr 2022 11:36:39 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-uniformbuffer/</guid>
      <description>UE4版本:4.26.2 前置知识 图形学中的uniform buffer 上一篇 工程源码 UE4GraphicsGuide 测试场景: Levels/RenderToQuad_UniformBuffer 定义Uniform Buffer UE4中的Uniform Buffer是一种储</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 03 贴图</title>
      <link>/posts/ue4-global-shaders-texture/</link>
      <pubDate>Sat, 09 Apr 2022 18:00:28 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-texture/</guid>
      <description>UE4版本:4.26.2 前置知识 图形学中的texturing和sampler知识 图形学中的input layout 上一篇 工程源码 UE4GraphicsGuide 测试场景: Levels/RenderToQuad_Texture 上一篇我们实现了向自</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 02 渲染</title>
      <link>/posts/ue4-global-shaders-rendering/</link>
      <pubDate>Fri, 08 Apr 2022 17:24:36 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-rendering/</guid>
      <description>UE4版本:4.26.2 前置知识 了解图形学中的渲染管线、SwapChain、Color Buffer和DepthStencil Buffer等 上一篇 工程源</description>
    </item>
    
    <item>
      <title>UE4 Global Shaders - 01 结构</title>
      <link>/posts/ue4-global-shaders-creation/</link>
      <pubDate>Fri, 08 Apr 2022 11:09:14 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-creation/</guid>
      <description>UE4版本:4.26.2 前置知识 了解图形学中的顶点着色器和像素着色器 UE4中创建和配置插件的方法，了解插件的文件结构 UE4C++ Global Shaders 是只应用于特定模型(例如全屏</description>
    </item>
    
  </channel>
</rss>
