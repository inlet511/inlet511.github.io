<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UE on 安宁技术博客</title>
    <link>/tags/ue/</link>
    <description>Recent content in UE on 安宁技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2022 &lt;a href=&#34;https://inlet511.github.io//&#34;&gt;An Ning&lt;/a&gt;&lt;/a&gt;
</copyright>
    <lastBuildDate>Wed, 09 Nov 2022 21:40:41 +0800</lastBuildDate><atom:link href="/tags/ue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rdg 07 串接Pass和资源</title>
      <link>/posts/rdg-07-chain-passes-resources/</link>
      <pubDate>Wed, 09 Nov 2022 21:40:41 +0800</pubDate>
      
      <guid>/posts/rdg-07-chain-passes-resources/</guid>
      <description>通常为了实现一个功能/效果，需要多个Pass配合，一般都是采用串接的方式，即先执行一个Pass，再执行其他Pass。多个Pass之间一定会有资源的传递</description>
    </item>
    
    <item>
      <title>Rdg 06 Resources</title>
      <link>/posts/rdg-06-resources/</link>
      <pubDate>Wed, 09 Nov 2022 15:12:32 +0800</pubDate>
      
      <guid>/posts/rdg-06-resources/</guid>
      <description>创建资源 创建资源描述 要创建资源，首先要创建描述，例： FRDGTextureDesc TextDesc = FRDGTextureDesc::Create3D( FIntVector(textureSize, textureSize, textureSize), EPixelFormat::PF_R32_FLOAT, FClearValueBinding::None, TexCreate_ShaderResource | TexCreate_UAV); 上例中创建了一个3D纹理资源，尺寸大小为textureSize的立方体纹理</description>
    </item>
    
    <item>
      <title>RDG 05 StructuredBuffer的用法</title>
      <link>/posts/rdg-05-structured-buffer/</link>
      <pubDate>Mon, 07 Nov 2022 00:10:45 +0800</pubDate>
      
      <guid>/posts/rdg-05-structured-buffer/</guid>
      <description>StructuredBuffer(结构缓冲区)适合于向Shader传入一组结构相同的数据，这组数据可以是基本数据类型，也可以是自定义的结构体(stru</description>
    </item>
    
    <item>
      <title>RDG 04 Graphics Pipeline State Initializer</title>
      <link>/posts/rdg-04-graphics-pipeline-state-initializer/</link>
      <pubDate>Thu, 03 Nov 2022 22:14:37 +0800</pubDate>
      
      <guid>/posts/rdg-04-graphics-pipeline-state-initializer/</guid>
      <description>1 概述和范例 FGraphicsPipelineStateInitializer 是一个代表渲染管线状态的对象，一个使用范例： FGraphicsPipelineStateInitializer GraphicsPSOInit; // 声明 RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit); // 应用RenderTargets // 设置各种状态 GraphicsPSOInit.DepthStencilState = TStaticDepthStencilState&amp;lt;false, CF_Always&amp;gt;::GetRHI(); GraphicsPSOInit.BlendState = TStaticBlendState&amp;lt;CW_RGB, BO_Add, BF_One, BF_One&amp;gt;::GetRHI(); GraphicsPSOInit.RasterizerState = TStaticRasterizerState&amp;lt;FM_Solid, CM_None&amp;gt;::GetRHI(); GraphicsPSOInit.PrimitiveType = PT_TriangleList;</description>
    </item>
    
    <item>
      <title>RDG 03 AddPass</title>
      <link>/posts/rdg-03-addpass/</link>
      <pubDate>Wed, 02 Nov 2022 23:19:27 +0800</pubDate>
      
      <guid>/posts/rdg-03-addpass/</guid>
      <description>1 原型 RDG流程中，添加一个Pass的方法是 FRDGBuilder::AddPass(),其应用的最广泛的一个重载的原型如下： template &amp;lt;typename ParameterStructType, typename ExecuteLambdaType&amp;gt; FRDGPassRef FRDGBuilder::AddPass( FRDGEventName&amp;amp;&amp;amp; Name, const ParameterStructType* ParameterStruct,</description>
    </item>
    
    <item>
      <title>RDG 02 Uniformbuffer</title>
      <link>/posts/rdg-02-uniformbuffer/</link>
      <pubDate>Tue, 01 Nov 2022 14:01:29 +0800</pubDate>
      
      <guid>/posts/rdg-02-uniformbuffer/</guid>
      <description>1 两种引用UniformBuffer的方法 如上文所述，Uniform Buffer即一个全局的Shader参数。 我们在 这篇文章 中已经讲过UniformB</description>
    </item>
    
    <item>
      <title>RDG 01-Shader参数</title>
      <link>/posts/rdg-01-shader-params/</link>
      <pubDate>Mon, 31 Oct 2022 21:34:21 +0800</pubDate>
      
      <guid>/posts/rdg-01-shader-params/</guid>
      <description>1 概述 Render Dependency Graph 简称RDG，从UE4最后几个版本开始逐步取代原来的渲染代码。 到了UE5，逐步完善，在源码中应用范围也日趋广泛。后面关于RDG的描述均以 UE5 为</description>
    </item>
    
    <item>
      <title>扰动贴图</title>
      <link>/posts/materials/disturbance/</link>
      <pubDate>Sun, 23 Oct 2022 17:22:40 +0800</pubDate>
      
      <guid>/posts/materials/disturbance/</guid>
      <description>效果 Motion_4WayChaos是引擎自带的一个Material Function，需要在ContentBrowser的选项种开启&amp;quot;Sho</description>
    </item>
    
    <item>
      <title>Lerp3Color</title>
      <link>/posts/materials/lerp-three-color/</link>
      <pubDate>Sun, 23 Oct 2022 15:11:59 +0800</pubDate>
      
      <guid>/posts/materials/lerp-three-color/</guid>
      <description>Lerp_3Color 该节点的作用类似于lerp，但是lerp是对两个数值进行线性插值，而这个节点是使用一个数值对3个数值进行线性插值。 当Alpha值处于0-0.5之间会</description>
    </item>
    
    <item>
      <title>Outline</title>
      <link>/posts/materials/outline/</link>
      <pubDate>Sun, 23 Oct 2022 14:55:24 +0800</pubDate>
      
      <guid>/posts/materials/outline/</guid>
      <description>在材质编辑器中实现描边效果的方法如下图 SampleSceneDepth获取场景深度，并考虑了CustomDepth和屏幕像素偏移的输入。 Pixel Offset</description>
    </item>
    
    <item>
      <title>贴图对齐世界</title>
      <link>/posts/materials/world-aligned-texture/</link>
      <pubDate>Sun, 23 Oct 2022 14:23:09 +0800</pubDate>
      
      <guid>/posts/materials/world-aligned-texture/</guid>
      <description>WorldAlignedTexture 材质编辑器中这个节点功能很强大，可以将贴图对齐到世界坐标。 TextureObject和TextureSize即要贴的贴图和贴图尺寸。 WorldPos</description>
    </item>
    
    <item>
      <title>Ue4 Global Texture</title>
      <link>/posts/ue4-global-texture/</link>
      <pubDate>Sun, 28 Aug 2022 17:06:11 +0800</pubDate>
      
      <guid>/posts/ue4-global-texture/</guid>
      <description>UE4版本:4.26.2 前置知识 从源码编译UE4引擎 全局纹理 UE代码中经常看到GEngine-&amp;gt;DefaultTexture之类的全局纹理，可以</description>
    </item>
    
    <item>
      <title>Ue4 Structured Buffer</title>
      <link>/posts/ue4-structured-buffer/</link>
      <pubDate>Tue, 12 Apr 2022 16:33:27 +0800</pubDate>
      
      <guid>/posts/ue4-structured-buffer/</guid>
      <description>UE4版本:4.26.2 前置知识 DirectX中的Compute Shader, Structured Buffer 推荐阅读《Introduction to 3D Game Programming with DirectX 11》的 Chapter12-The Compute Shader 上一篇 工程源码 UE4GraphicsGuide 测试</description>
    </item>
    
    <item>
      <title>Ue4 Compute Shader</title>
      <link>/posts/ue4-compute-shader/</link>
      <pubDate>Sun, 10 Apr 2022 22:06:45 +0800</pubDate>
      
      <guid>/posts/ue4-compute-shader/</guid>
      <description>UE4版本:4.26.2 前置知识 DirectX中的Compute Shader, UAV(Unordered Access View) 推荐阅读《Introduction to 3D Game Programming with DirectX 11》的 Chapter12-The Compute Shader 工程源码 UE4GraphicsGuide 测试场景</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 04 Uniformbuffer</title>
      <link>/posts/ue4-global-shaders-uniformbuffer/</link>
      <pubDate>Sun, 10 Apr 2022 11:36:39 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-uniformbuffer/</guid>
      <description>UE4版本:4.26.2 前置知识 图形学中的uniform buffer 上一篇 工程源码 UE4GraphicsGuide 测试场景: Levels/RenderToQuad_UniformBuffer 定义Uniform Buffer UE4中的Uniform Buffer是一种储</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 03 贴图</title>
      <link>/posts/ue4-global-shaders-texture/</link>
      <pubDate>Sat, 09 Apr 2022 18:00:28 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-texture/</guid>
      <description>UE4版本:4.26.2 前置知识 图形学中的texturing和sampler知识 图形学中的input layout 上一篇 工程源码 UE4GraphicsGuide 测试场景: Levels/RenderToQuad_Texture 上一篇我们实现了向自</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 02 渲染</title>
      <link>/posts/ue4-global-shaders-rendering/</link>
      <pubDate>Fri, 08 Apr 2022 17:24:36 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-rendering/</guid>
      <description>UE4版本:4.26.2 前置知识 了解图形学中的渲染管线、SwapChain、Color Buffer和DepthStencil Buffer等 上一篇 工程源</description>
    </item>
    
    <item>
      <title>UE4 Global Shaders - 01 结构</title>
      <link>/posts/ue4-global-shaders-creation/</link>
      <pubDate>Fri, 08 Apr 2022 11:09:14 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-creation/</guid>
      <description>UE4版本:4.26.2 前置知识 了解图形学中的顶点着色器和像素着色器 UE4中创建和配置插件的方法，了解插件的文件结构 UE4C++ Global Shaders 是只应用于特定模型(例如全屏</description>
    </item>
    
  </channel>
</rss>
