<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文章 on 安宁技术博客</title>
    <link>/posts/</link>
    <description>Recent content in 文章 on 安宁技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2022 &lt;a href=&#34;https://inlet511.github.io//&#34;&gt;An Ning&lt;/a&gt;&lt;/a&gt;
</copyright>
    <lastBuildDate>Mon, 07 Nov 2022 00:10:45 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RDG04 StructuredBuffer的用法</title>
      <link>/posts/rdg-structured-buffer/</link>
      <pubDate>Mon, 07 Nov 2022 00:10:45 +0800</pubDate>
      
      <guid>/posts/rdg-structured-buffer/</guid>
      <description>StructuredBuffer(结构缓冲区)适合于向Shader传入一组结构相同的数据，这组数据可以是基本数据类型，也可以是自定义的结构体(stru</description>
    </item>
    
    <item>
      <title>RDG04 Graphics Pipeline State Initializer</title>
      <link>/posts/rdg-graphics-pipeline-state-initializer/</link>
      <pubDate>Thu, 03 Nov 2022 22:14:37 +0800</pubDate>
      
      <guid>/posts/rdg-graphics-pipeline-state-initializer/</guid>
      <description>1 概述和范例 FGraphicsPipelineStateInitializer 是一个代表渲染管线状态的对象，一个使用范例： FGraphicsPipelineStateInitializer GraphicsPSOInit; // 声明 RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit); // 应用RenderTargets // 设置各种状态 GraphicsPSOInit.DepthStencilState = TStaticDepthStencilState&amp;lt;false, CF_Always&amp;gt;::GetRHI(); GraphicsPSOInit.BlendState = TStaticBlendState&amp;lt;CW_RGB, BO_Add, BF_One, BF_One&amp;gt;::GetRHI(); GraphicsPSOInit.RasterizerState = TStaticRasterizerState&amp;lt;FM_Solid, CM_None&amp;gt;::GetRHI(); GraphicsPSOInit.PrimitiveType = PT_TriangleList;</description>
    </item>
    
    <item>
      <title>RDG03 AddPass</title>
      <link>/posts/rdg-addpass/</link>
      <pubDate>Wed, 02 Nov 2022 23:19:27 +0800</pubDate>
      
      <guid>/posts/rdg-addpass/</guid>
      <description>1 原型 RDG流程中，添加一个Pass的方法是 FRDGBuilder::AddPass(),其应用的最广泛的一个重载的原型如下： template &amp;lt;typename ParameterStructType, typename ExecuteLambdaType&amp;gt; FRDGPassRef FRDGBuilder::AddPass( FRDGEventName&amp;amp;&amp;amp; Name, const ParameterStructType* ParameterStruct,</description>
    </item>
    
    <item>
      <title>RDG02 Uniformbuffer</title>
      <link>/posts/rdg-uniformbuffer/</link>
      <pubDate>Tue, 01 Nov 2022 14:01:29 +0800</pubDate>
      
      <guid>/posts/rdg-uniformbuffer/</guid>
      <description>1 两种引用UniformBuffer的方法 如上文所述，Uniform Buffer即一个全局的Shader参数。 我们在 这篇文章 中已经讲过UniformB</description>
    </item>
    
    <item>
      <title>RDG01-Shader参数</title>
      <link>/posts/rdg-shader-params/</link>
      <pubDate>Mon, 31 Oct 2022 21:34:21 +0800</pubDate>
      
      <guid>/posts/rdg-shader-params/</guid>
      <description>1 概述 Render Dependency Graph 简称RDG，从UE4最后几个版本开始逐步取代原来的渲染代码。 到了UE5，逐步完善，在源码中应用范围也日趋广泛。后面关于RDG的描述均以 UE5 为</description>
    </item>
    
    <item>
      <title>Slate 相关宏以及 TAttribute</title>
      <link>/posts/slate/slate-arguments-and-attribute/</link>
      <pubDate>Tue, 25 Oct 2022 22:50:08 +0800</pubDate>
      
      <guid>/posts/slate/slate-arguments-and-attribute/</guid>
      <description>UE5版本:5.03 举个例子 class SMyWidget : public SCompoundWidget { SLATE_BEGIN_ARGS( SMyWidget ) , _PreferredWidth( 150.0f ) , _ForegroundColor( FLinearColor::White ) {} SLATE_ARGUMENT(FString, Directory) SLATE_ATTRIBUTE(float, PreferredWidth) SLATE_ATTRIBUTE(FSlateColor, ForegroundColor) SLATE_END_ARGS() // ... ... } SLATE_BEGIN/END_ARGS SLATE_BEGIN_ARGS() 和 SLATE_END_ARGS() 的意义在引擎源码中已经写了：让用户可以通过 SNew 和 SAssignNew 来构建 S</description>
    </item>
    
    <item>
      <title>扰动贴图</title>
      <link>/posts/materials/disturbance/</link>
      <pubDate>Sun, 23 Oct 2022 17:22:40 +0800</pubDate>
      
      <guid>/posts/materials/disturbance/</guid>
      <description>效果 Motion_4WayChaos是引擎自带的一个Material Function，需要在ContentBrowser的选项种开启&amp;quot;Sho</description>
    </item>
    
    <item>
      <title>Lerp3Color</title>
      <link>/posts/materials/lerp-three-color/</link>
      <pubDate>Sun, 23 Oct 2022 15:11:59 +0800</pubDate>
      
      <guid>/posts/materials/lerp-three-color/</guid>
      <description>Lerp_3Color 该节点的作用类似于lerp，但是lerp是对两个数值进行线性插值，而这个节点是使用一个数值对3个数值进行线性插值。 当Alpha值处于0-0.5之间会</description>
    </item>
    
    <item>
      <title>Outline</title>
      <link>/posts/materials/outline/</link>
      <pubDate>Sun, 23 Oct 2022 14:55:24 +0800</pubDate>
      
      <guid>/posts/materials/outline/</guid>
      <description>在材质编辑器中实现描边效果的方法如下图 SampleSceneDepth获取场景深度，并考虑了CustomDepth和屏幕像素偏移的输入。 Pixel Offset</description>
    </item>
    
    <item>
      <title>贴图对齐世界</title>
      <link>/posts/materials/world-aligned-texture/</link>
      <pubDate>Sun, 23 Oct 2022 14:23:09 +0800</pubDate>
      
      <guid>/posts/materials/world-aligned-texture/</guid>
      <description>WorldAlignedTexture 材质编辑器中这个节点功能很强大，可以将贴图对齐到世界坐标。 TextureObject和TextureSize即要贴的贴图和贴图尺寸。 WorldPos</description>
    </item>
    
    <item>
      <title>关于深度</title>
      <link>/posts/materials/scenedepth-and-customdepth/</link>
      <pubDate>Fri, 21 Oct 2022 23:59:09 +0800</pubDate>
      
      <guid>/posts/materials/scenedepth-and-customdepth/</guid>
      <description>什么是Custom Depth UE中对物体勾选“Render CustomDepth Pass” 就会让对象渲染到一个特殊的深度Buffer中，即CustomDepth。在这个特殊的深度</description>
    </item>
    
    <item>
      <title>Using View</title>
      <link>/posts/using-view/</link>
      <pubDate>Wed, 19 Oct 2022 21:32:22 +0800</pubDate>
      
      <guid>/posts/using-view/</guid>
      <description>UE5版本:5.03 经常可以在引擎的Shader中看到使用View这个UniformBuffer的情形，例如： void VSMain( in float2 InPosition : ATTRIBUTE0, out float2 OutTexCoord : TEXCOORD0, out float4 OutScreenVector : TEXCOORD1, out float4 OutPosition</description>
    </item>
    
    <item>
      <title>UE5 渲染开发的变化和注意事项</title>
      <link>/posts/ue5-rendering-updates/</link>
      <pubDate>Wed, 19 Oct 2022 20:34:28 +0800</pubDate>
      
      <guid>/posts/ue5-rendering-updates/</guid>
      <description>UE5版本:5.03 1 渲染开发的设置变化 在UE4中，我们需要在Engine/Config/ConsoleVariables.ini 中修改以下内容： r.ShaderDevelopmentMode=1 r.Shaders.Optimize=0</description>
    </item>
    
    <item>
      <title>Ue4 Global Texture</title>
      <link>/posts/ue4-global-texture/</link>
      <pubDate>Sun, 28 Aug 2022 17:06:11 +0800</pubDate>
      
      <guid>/posts/ue4-global-texture/</guid>
      <description>UE4版本:4.26.2 前置知识 从源码编译UE4引擎 全局纹理 UE代码中经常看到GEngine-&amp;gt;DefaultTexture之类的全局纹理，可以</description>
    </item>
    
    <item>
      <title>Ue4 Structured Buffer</title>
      <link>/posts/ue4-structured-buffer/</link>
      <pubDate>Tue, 12 Apr 2022 16:33:27 +0800</pubDate>
      
      <guid>/posts/ue4-structured-buffer/</guid>
      <description>UE4版本:4.26.2 前置知识 DirectX中的Compute Shader, Structured Buffer 推荐阅读《Introduction to 3D Game Programming with DirectX 11》的 Chapter12-The Compute Shader 上一篇 工程源码 UE4GraphicsGuide 测试</description>
    </item>
    
    <item>
      <title>Ue4 Compute Shader</title>
      <link>/posts/ue4-compute-shader/</link>
      <pubDate>Sun, 10 Apr 2022 22:06:45 +0800</pubDate>
      
      <guid>/posts/ue4-compute-shader/</guid>
      <description>UE4版本:4.26.2 前置知识 DirectX中的Compute Shader, UAV(Unordered Access View) 推荐阅读《Introduction to 3D Game Programming with DirectX 11》的 Chapter12-The Compute Shader 工程源码 UE4GraphicsGuide 测试场景</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 04 Uniformbuffer</title>
      <link>/posts/ue4-global-shaders-uniformbuffer/</link>
      <pubDate>Sun, 10 Apr 2022 11:36:39 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-uniformbuffer/</guid>
      <description>UE4版本:4.26.2 前置知识 图形学中的uniform buffer 上一篇 工程源码 UE4GraphicsGuide 测试场景: Levels/RenderToQuad_UniformBuffer 定义Uniform Buffer UE4中的Uniform Buffer是一种储</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 03 贴图</title>
      <link>/posts/ue4-global-shaders-texture/</link>
      <pubDate>Sat, 09 Apr 2022 18:00:28 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-texture/</guid>
      <description>UE4版本:4.26.2 前置知识 图形学中的texturing和sampler知识 图形学中的input layout 上一篇 工程源码 UE4GraphicsGuide 测试场景: Levels/RenderToQuad_Texture 上一篇我们实现了向自</description>
    </item>
    
    <item>
      <title>Ue4 Global Shaders - 02 渲染</title>
      <link>/posts/ue4-global-shaders-rendering/</link>
      <pubDate>Fri, 08 Apr 2022 17:24:36 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-rendering/</guid>
      <description>UE4版本:4.26.2 前置知识 了解图形学中的渲染管线、SwapChain、Color Buffer和DepthStencil Buffer等 上一篇 工程源</description>
    </item>
    
    <item>
      <title>UE4 Global Shaders - 01 结构</title>
      <link>/posts/ue4-global-shaders-creation/</link>
      <pubDate>Fri, 08 Apr 2022 11:09:14 +0800</pubDate>
      
      <guid>/posts/ue4-global-shaders-creation/</guid>
      <description>UE4版本:4.26.2 前置知识 了解图形学中的顶点着色器和像素着色器 UE4中创建和配置插件的方法，了解插件的文件结构 UE4C++ Global Shaders 是只应用于特定模型(例如全屏</description>
    </item>
    
  </channel>
</rss>
